Participant.Name	= c("K9 Officer", "Officer", "Officer"),
Outcome = rep("Injured", 3))
all_2018_2023 <- rbindlist(list(all_2018_2023, lasvegas_20220811), fill=TRUE)
}
# Drop one row for the 2021-07-29 239 Gilkeson Rd Pittsburgh case
all_2018_2023 <- all_2018_2023[-which(all_2018_2023$Incident.Date == "2021-07-29" & all_2018_2023$Address == "239 Gilkeson Rd")[2], ]
# Save the final result
fwrite(all_2018_2023, "data/All_2018_2023.csv")
## ---------------------------
##
## Script name: 02_sort.R
##
## Purpose of script: To sort by cities so we can identify the cities that we need to further collect transport mode info on.
##
## Author: Cal Chengqi Fang
##
## Date Created: 2023-09-29
##
## Copyright (c) Cal Chengqi Fang, 2023
## Email: cal.cf@uchicago.edu
##
## ---------------------------
##
## Notes:
##   This is to group by cities and sort them to see what cities have met the criteria (at least 10 incidents during the analysis period.)
##
## ---------------------------
## set working directory for Mac and PC
setwd("/Users/atchoo/Documents/GitHub/homeboydropoff")  # Cal's working directory (mac)
# setwd("C:/Users/")     # Cal's working directory (PC)
## ---------------------------
rm(list=ls())
options(scipen=6, digits=4)         # I prefer to view outputs in non-scientific notation
memory.limit(30000000)                  # this is needed on some PCs to increase memory allowance, but has no impact on macs.
## ---------------------------
## load up the packages we will need:  (uncomment as required)
require(tidyverse)
require(data.table)
## ---------------------------
raw <- fread("data/All_2018_2023.csv")
# STEP 1
# Sorting
above10_list <- raw %>%
mutate(geo = paste0(State, "_", City.Or.County)) %>%
group_by(geo) %>%
summarise(casenum = n()) %>%
filter(casenum >= 10)
# STEP 2
# Filtering the observations by the above10_list
## And also adding back the other one borough of NYC
above10 <- raw %>%
mutate(geo = paste0(State, "_", City.Or.County)) %>%
filter(geo %in% above10_list$geo |
City.Or.County %in% c("Bronx", "Brooklyn", "Corona (Queens)", "New York (Manhattan)", "Staten Island")) %>%
select(-geo)
fwrite(above10, "data/Above10_2018_2023.csv")
## ---------------------------
##
## Script name: 04_analysis.R
##
## Purpose of script: To make some pivot tables for the transport mode info.
##
## Author: Cal Chengqi Fang
##
## Date Created: 2023-09-30
##
## Copyright (c) Cal Chengqi Fang, 2023
## Email: cal.cf@uchicago.edu
##
## ---------------------------
##
## Notes:
##
##
## ---------------------------
## set working directory for Mac and PC
setwd("/Users/atchoo/Documents/GitHub/homeboydropoff")  # Cal's working directory (mac)
# setwd("C:/Users/")     # Cal's working directory (PC)
## ---------------------------
rm(list=ls())
options(scipen=6, digits=4)         # I prefer to view outputs in non-scientific notation
memory.limit(30000000)                  # this is needed on some PCs to increase memory allowance, but has no impact on macs.
## ---------------------------
## load up the packages we will need:  (uncomment as required)
require(tidyverse)
require(data.table)
require(googlesheets4)
## ---------------------------
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
pivot_count <- final %>%
group_by(GEO, Response.Type) %>%
summarize(count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = count)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown_prop = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`)) %>%
mutate_if(is.numeric, round, digits=4)
View(pivot_prop)
View(final)
rm(list = ls())
library(tidyverse)
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
final$City.Or.County <- as.factor(final$City.Or.County)
final$Year <- format(final$Incident.Date, "%Y")
final$Response.type <- as.factor(final$Response.type)
View(final)
final$Response.type <- as.factor(final$Response.type)
as.factor(final$Response.type)
table(final$Response.Type)
---
title: "Pivot Tables for cities with more than 10 police shot through 04/20/2018 to 04/20/2023"
rm(list = ls())
library(tidyverse)
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
# Drop cities
final$City.Or.County <- as.factor(final$City.Or.County)
final$Year <- format(final$Incident.Date, "%Y")
final$Response.type <- as.factor(final$Response.type)
temp <- final %>%
group_by(City.Or.County, Response.type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.type, values_from = Count) %>%
mutate(Total = rowSums())
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
View(final)
temp <- final %>%
group_by(City.Or.County, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = Count) %>%
mutate(Total = rowSums())
rm(list = ls())
library(tidyverse)
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
# Drop cities with higher than 30% unknown transport mode information
temp <- final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = Count) %>%
mutate(Total = sum(c(Unknown, `Police Self-transfer`, Others, Ambulance), na.rm=TRUE)) %>%
filter(Unknown <= 0.3*Total | is.na(Unknown))
final <- final %>%
filter(GEO %in% temp$GEO)
final$City.Or.County <- as.factor(final$City.Or.County)
final$Year <- format(final$Incident.Date, "%Y")
final$Response.Type <- as.factor(final$Response.Type)
final %>%
group_by(GEO, Year) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Year, values_from = Count) %>%
mutate(Total = sum(c(`2019`, `2020`, `2021`, `2022`, `2023`), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Year) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Year, values_from = Count) %>%
mutate(Total = sum(c(`2018`, `2019`, `2020`, `2021`, `2022`, `2023`), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
knitr::kable()
final_2 %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
knitr::kable()
final %>%
group_by(Year, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(Year, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
knitr::kable()
rm(list = ls())
library(tidyverse)
above10 <- read_csv("data/Homeboy Dropoff - above10_04202018-04202023.csv") %>%
filter(!grepl('uicide', Detail))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
require(tidyverse)
require(data.table)
require(googlesheets4)
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
# Drop cities with higher than 30% Unknown
temp <- final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = Count) %>%
mutate(Total = sum(c(Unknown, `Police Self-transfer`, Others, Ambulance), na.rm=TRUE)) %>%
filter(Unknown <= 0.30*Total | is.na(Unknown))
final <- final %>%
filter(City.Or.County %in% temp$City.Or.County) %>%
mutate(Year = format(Incident.Date, "%Y")) %>%
mutate(across(all_of(c("GEO","Response.Type")), as.factor))
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
# Drop cities with higher than 30% Unknown
temp <- final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = Count) %>%
mutate(Total = sum(c(Unknown, `Police Self-transfer`, Others, Ambulance), na.rm=TRUE)) %>%
filter(Unknown <= 0.30*Total | is.na(Unknown))
final <- final %>%
filter(GEO %in% temp$GEO) %>%
mutate(Year = format(Incident.Date, "%Y")) %>%
mutate(across(all_of(c("GEO","Response.Type")), as.factor))
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
final %>%
group_by(State, City.Or.County, Year) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Year, values_from = Count) %>%
mutate(Total = sum(c(`2019`, `2020`, `2021`, `2022`, `2023`), na.rm=TRUE)) %>%
knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
require(tidyverse)
require(data.table)
require(googlesheets4)
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
# Drop cities with higher than 30% Unknown
temp <- final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = Count) %>%
mutate(Total = sum(c(Unknown, `Police Self-transfer`, Others, Ambulance), na.rm=TRUE)) %>%
filter(Unknown <= 0.30*Total | is.na(Unknown))
final <- final %>%
filter(GEO %in% temp$GEO) %>%
mutate(Year = format(Incident.Date, "%Y")) %>%
mutate(across(all_of(c("GEO","Response.Type")), as.factor))
final %>%
group_by(GEO, Year) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Year, values_from = Count) %>%
mutate(Total = sum(c(`2019`, `2020`, `2021`, `2022`, `2023`), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Year) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Year, values_from = Count) %>%
mutate(Total = sum(c(`2018`, `2019`, `2020`, `2021`, `2022`, `2023`), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.type,
values_from = Count) %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.type,
values_from = Count) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(GEO, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
mutate(Total = 1.00) %>%
knitr::kable()
final %>%
group_by(Year, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(Year, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(Year, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(Year, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(Year, Response.Type) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Response.Type,
values_from = Count) %>%
ungroup() %>%
mutate(Total = rowSums(select_if(., is.numeric), na.rm=TRUE)) %>%
knitr::kable()
final %>%
group_by(Year, Response.Type) %>%
summarise(Count = n()) %>%
mutate(Prop = round(Count / sum(Count), 2)) %>%
select(-Count) %>%
pivot_wider(names_from = Response.Type,
values_from = Prop) %>%
mutate(Total = 1.00) %>%
knitr::kable()
