as.data.table()
# STEP 5
# Combine all data.table to obtain a large data.table for online searching
all_2018_2023 <- rbindlist(list(K2023, I2023,
K2022, I2022,
K2021, I2021,
K2020, I2020,
K2019, I2019,
A2018), use.names=TRUE)
# STEP 6
# Extra cleaning
# Alter the info for the New Orleans case
all_2018_2023$State[which(all_2018_2023$Incident.Date == "2022-06-27" & all_2018_2023$Address == "1400 block of Iberville St")] <- "Tennessee"
all_2018_2023$City.Or.County[which(all_2018_2023$Incident.Date == "2022-06-27" & all_2018_2023$Address == "1400 block of Iberville St")] <- "Erin"
all_2018_2023$Address[which(all_2018_2023$Incident.Date == "2022-06-27" & all_2018_2023$Address == "1400 block of Iberville St")] <- "300 block of Highway 149"
# Add Officer Harry Gunderson to the 2021-08-19 Albuquerque case
if (!"Officer Harry Gunderson" %in% all_2018_2023$Participant.Name & !"Harry Gunderson" %in% all_2018_2023$Participant.Name) {
all_2018_2023$Incident.Date <- as.Date(all_2018_2023$Incident.Date)
harry <- list(as.Date("2021-08-19"), "New Mexico", "Albuquerque", "1105 Juan Tabo Blvd NE", "male", "Officer Harry Gunderson", "Injured")
all_2018_2023 <- rbindlist(list(all_2018_2023, harry), fill=TRUE)
} else {
print("Have a look on the data.")
}
# Alter the 2021-11-19 Cameron Glen Dr NW case
all_2018_2023$City.Or.County[which(all_2018_2023$Incident.Date == "2021-11-19" & all_2018_2023$Address == "Cameron Glen Dr NW")] <- "Sandy Springs"
# Drop one row for the 2020-12-04 4085 Ely Ave Bronx case
all_2018_2023 <- all_2018_2023[-which(all_2018_2023$Incident.Date == "2020-12-04" & all_2018_2023$Address == "4085 Ely Ave")[3], ]
# Add the 2021-03-15 Chicago case
if (!"2021-03-15" %in% all_2018_2023$Incident.Date[which(all_2018_2023$City.Or.County == "Chicago")]) {
chicago_20210315 <- list(as.Date("2021-03-15"), "Illinois", "Chicago", "8900 block of S Stony Island Avenue", "male", "Officer", "Injured")
all_2018_2023 <- rbindlist(list(all_2018_2023, chicago_20210315), fill=TRUE)
} else {
print("Have a look on the data.")
}
# Add the 2021-12-16 NYC Corona (Queens) case
if (!"2021-12-16" %in% all_2018_2023$Incident.Date[which(all_2018_2023$City.Or.County == "Corona (Queens)")]) {
queens_20211216 <- list(as.Date("2021-12-16"), "New York", "Corona (Queens)", "56-15 Northern Blvd", "male", "Lieutenant", "Injured")
all_2018_2023 <- rbindlist(list(all_2018_2023, queens_20211216), fill=TRUE)
} else {
print("Have a look on the data.")
}
# Add three more rows for the 2019-01-28 Huston case
if (length(which(all_2018_2023$City.Or.County == "Houston" & all_2018_2023$Incident.Date == "2019-01-28")) == 2) {
houston_20211216 <- data.table(Incident.Date = rep(as.Date("2019-01-28"), 3),
State = rep("Texas", 3),
City.Or.County	= rep("Houston", 3),
Address = rep("7815 Harding St", 3),
Participant.Gender = c("N/A", "male", "male"),
Participant.Name	= c("Officer", "Officer Gerald Goines", "Officer Steven Bryant"),
Outcome = rep("Injured", 3))
all_2018_2023 <- rbindlist(list(all_2018_2023, houston_20211216), fill=TRUE)
}
# Alter the 2020-07-02 Independence Ave and Hardesty Ave Kansas City case
all_2018_2023 <- all_2018_2023[-which(all_2018_2023$Incident.Date == "2020-07-02" & all_2018_2023$Address == "Independence Ave and Hardesty Ave" & all_2018_2023$Participant.Gender == "female"), ]
all_2018_2023$Participant.Gender[which(all_2018_2023$Incident.Date == "2020-07-02" & all_2018_2023$Address == "Independence Ave and Hardesty Ave")] <- "male"
# Add the 2022-08-11 Las Vegas case
if (length(which(all_2018_2023$City.Or.County == "Las Vegas" & all_2018_2023$Incident.Date == "2022-08-11")) == 0) {
lasvegas_20220811 <- data.table(Incident.Date = rep(as.Date("2022-08-11"), 3),
State = rep("Nevada", 3),
City.Or.County	= rep("Las Vegas", 3),
Address = rep(NA, 3),
Participant.Gender = rep(NA, 3),
Participant.Name	= c("K9 Officer", "Officer", "Officer"),
Outcome = rep("Injured", 3))
all_2018_2023 <- rbindlist(list(all_2018_2023, lasvegas_20220811), fill=TRUE)
}
# Drop one row for the 2021-07-29 239 Gilkeson Rd Pittsburgh case
all_2018_2023 <- all_2018_2023[-which(all_2018_2023$Incident.Date == "2021-07-29" & all_2018_2023$Address == "239 Gilkeson Rd")[2], ]
# Save the final result
fwrite(all_2018_2023, "data/All_2018_2023.csv")
## ---------------------------
##
## Script name: 02_sort.R
##
## Purpose of script: To sort by cities so we can identify the cities that we need to further collect transport mode info on.
##
## Author: Cal Chengqi Fang
##
## Date Created: 2023-09-29
##
## Copyright (c) Cal Chengqi Fang, 2023
## Email: cal.cf@uchicago.edu
##
## ---------------------------
##
## Notes:
##   This is to group by cities and sort them to see what cities have met the criteria (at least 10 incidents during the analysis period.)
##
## ---------------------------
## set working directory for Mac and PC
setwd("/Users/atchoo/Documents/GitHub/homeboydropoff")  # Cal's working directory (mac)
# setwd("C:/Users/")     # Cal's working directory (PC)
## ---------------------------
rm(list=ls())
options(scipen=6, digits=4)         # I prefer to view outputs in non-scientific notation
memory.limit(30000000)                  # this is needed on some PCs to increase memory allowance, but has no impact on macs.
## ---------------------------
## load up the packages we will need:  (uncomment as required)
require(tidyverse)
require(data.table)
## ---------------------------
raw <- fread("data/All_2018_2023.csv")
# STEP 1
# Sorting
above10_list <- raw %>%
mutate(geo = paste0(State, "_", City.Or.County)) %>%
group_by(geo) %>%
summarise(casenum = n()) %>%
filter(casenum >= 10)
# STEP 2
# Filtering the observations by the above10_list
## And also adding back the other one borough of NYC
above10 <- raw %>%
mutate(geo = paste0(State, "_", City.Or.County)) %>%
filter(geo %in% above10_list$geo |
City.Or.County %in% c("Bronx", "Brooklyn", "Corona (Queens)", "New York (Manhattan)", "Staten Island")) %>%
select(-geo)
fwrite(above10, "data/Above10_2018_2023.csv")
#Install the required package
install.packages('googlesheets4')
require(googlesheets4)
## ---------------------------
#Read google sheets data into R
x <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
View(x)
## ---------------------------
#Read google sheets data into R
x <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
## ---------------------------
##
## Script name: 04_analysis.R
##
## Purpose of script: To make some tables for the transport mode info.
##
## Author: Cal Chengqi Fang
##
## Date Created: 2023-09-30
##
## Copyright (c) Cal Chengqi Fang, 2023
## Email: cal.cf@uchicago.edu
##
## ---------------------------
##
## Notes:
##
##
## ---------------------------
## set working directory for Mac and PC
setwd("/Users/atchoo/Documents/GitHub/homeboydropoff")  # Cal's working directory (mac)
# setwd("C:/Users/")     # Cal's working directory (PC)
## ---------------------------
rm(list=ls())
options(scipen=6, digits=4)         # I prefer to view outputs in non-scientific notation
memory.limit(30000000)                  # this is needed on some PCs to increase memory allowance, but has no impact on macs.
## ---------------------------
## load up the packages we will need:  (uncomment as required)
require(tidyverse)
require(data.table)
require(googlesheets4)
## ---------------------------
# Read google sheets data into R
above10_final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
colnames(above10_final)
above10_final %>%
mutate(GEO = str_c(City.Or.County, " (", state.abb[match(State, state.name)], ")"))
# Make tables
above10_final <- above10_final %>%
mutate(GEO = str_c(City.Or.County, " (", state.abb[match(State, state.name)], ")"))
unique(above10_final$GEO)
# Make tables
above10_final <- above10_final %>%
mutate(GEO = str_c(City.Or.County, ", ", state.abb[match(State, state.name)]))
unique(above10_final$GEO)
View(above10_final)
?gsub
# Replace multiple strings at a time
rep_str = c("Bronx" = "NYC", "Brooklyn" = "NYC", "Corona (Queens)" = "NYC", "New York (Manhattan)" = "NYC", "Staten Island" = "NYC")
above10_final <- above10_final %>%
mutate(City.Or.County = str_replace_all(City.Or.County, rep_str),
GEO = str_c(City.Or.County, ", ", state.abb[match(State, state.name)]))
unique(above10_final$GEO)
table((above10_final$GEO))
c
rep_str
state.name
# Read google sheets data into R
above10_final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Make tables
# Replace multiple strings at a time
rep_str = c("Bronx" = "NYC", "Brooklyn" = "NYC", "Corona (Queens)" = "NYC", "New York (Manhattan)" = "NYC", "Staten Island" = "NYC")
above10_final <- above10_final %>%
mutate(City.Or.County = str_replace_all(City.Or.County, rep_str),
GEO = str_c(City.Or.County, ", ", append(state.abb, "DC")[match(State, append(state.name, "District of Columbia"))]))
unique(above10_final$GEO)
# Read google sheets data into R
above10_final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Make tables
# Replace multiple strings at a time
rep_str = c("Bronx", "Brooklyn", "Corona (Queens)", "New York (Manhattan)", "Staten Island")
above10_final$City.Or.County <- gsub(paste0("\\b(", paste0(rep_str, collapse="|"), ")[s]?\\b"), "NYC", above10_final$City.Or.County, ignore.case = TRUE)
above10_final <- above10_final %>%
mutate(GEO = str_c(City.Or.County, ", ", append(state.abb, "DC")[match(State, append(state.name, "District of Columbia"))]))
unique(above10_final$GEO)
unique(above10_final$City.Or.County)
paste0("\\b(", paste0(rep_str, collapse="|"), ")[s]?\\b")
df <- data.frame(id=c(1,2,3,NA),
address=c('Orange St','Anton Blvd','Jefferson Pkwy',''),
work_address=c('Main St',NA,'Apple Blvd','Portola Pkwy'))
rep_str = c('St'='Street','Blvd'='Street','Pkwy'='Street')
str_replace_all(df$work_address, rep_str)
above10_final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Make tables
# Replace multiple strings at a time
rep_str = c("Bronx" = "NYC", "Brooklyn" = "NYC", "Corona (Queens)" = "NYC", "New York (Manhattan)" = "NYC", "Staten Island" = "NYC")
above10_final$City.Or.County <- str_replace_all(above10_final$City.Or.County, rep_str)
above10_final <- above10_final %>%
mutate(GEO = str_c(City.Or.County, ", ", append(state.abb, "DC")[match(State, append(state.name, "District of Columbia"))]))
unique(above10_final$GEO)
which(above10_final$City.Or.County == "New York (Manhattan)")
above10_final$City.Or.County <- str_replace_all(above10_final$City.Or.County, rep_str)
unique(above10_final$City.Or.County)
## ---------------------------
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Make tables
# Replace multiple strings at a time
NYC = c("Bronx" = "NYC", "Brooklyn" = "NYC", "Corona (Queens)" = "NYC", "New York (Manhattan)" = "NYC", "Staten Island" = "NYC")
final$City.Or.County[final$City.Or.County %in% NYC] <- "NYC"
unique(final$City.Or.County)
str(final)
final$City.Or.County=="Bronx"
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
unique(final$GEO)
unique(final$City.Or.County)
unique(final$City.Or.County) %>% sort()
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
unique(final$City.Or.County) %>% sort()
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Make tables
# Replace multiple strings at a time
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
unique(final$City.Or.County) %>% sort()
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
unique(final$GEO)
summary <- final %>%
group_by(GEO, Resopnse.Type) %>%
summarize(count = c())
View(summary)
summary <- final %>%
group_by(GEO, Resopnse.Type) %>%
summarize(count = n())
summary <- final %>%
group_by(GEO, Resopnse.Type) %>%
summarize(count = n()) %>%
pivot_wider(names_from = Resopnse.Type, values_from = count)
install.packages("pivottabler")
require(pivottabler)
# Make pivot tables
qpvt(final, "GEO", "Response.Type", "n()")
colnames(final)
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Make pivot tables
qpvt(final, "GEO", "Response.Type", "n()")
# Make pivot tables
pivot_count <- qpvt(final, "GEO", "Response.Type", "n()")
print(pivot_count)
pivot_count <- qpvt(final, "GEO", "Response.Type", "n()") %>%
as.data.table()
qpvt(final, "GEO", "Response.Type", "n()/sum()")
qpvt(final, "GEO", "Response.Type", "n()")
qpvt(final, "GEO", "Response.Type", "n()/rowSums()")
summary <- final %>%
group_by(GEO, Resopnse.Type) %>%
summarize(count = n())
summary <- final %>%
group_by(GEO, Response.Type) %>%
summarize(count = n())
View(summary)
summary <- final %>%
group_by(GEO, Response.Type) %>%
summarize(count = n()) %>%
pivot_wider(names_from = Resopnse.Type, values_from = count)
summary <- final %>%
group_by(GEO, Response.Type) %>%
summarize(count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = count)
pivot_prop <- pivot_count %>%
as.matrix() %>%
sweep(MARGIN=1, FUN="/", STATS=rowSums())
?sweep
pivot_prop <- pivot_count %>%
as.matrix()
pivot_count <- final %>%
group_by(GEO, Response.Type) %>%
summarize(count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = count)
pivot_prop <- pivot_count %>%
as.matrix() %>%
sweep(1, FUN="/", STATS=rowSums())
pivot_prop <- pivot_count %>%
as.matrix() %>%
sweep(1, FUN="/", STATS=rowSums(.))
pivot_prop <- pivot_count %>%
as.matrix()
pivot_prop
pivot_prop[, 2:5]
pivot_prop[, 2:5] <- sweep(pivot_prop[, 2:5], 1, "/", rowSums(pivot_prop[, 2:5]))
pivot_prop[, 2:5] <- sweep(as.numeric(pivot_prop[, 2:5]), 1, "/", as.numeric(pivot_prop[, 2:5]))
sweep(as.numeric(pivot_prop[, 2:5]), 1, "/", rowSums(as.numeric(pivot_prop[, 2:5])))
pivot_prop <- pivot_count %>%
as.matrix()
pivot_prop[, 2:5]
colnames(pivot_count)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / (Ambulance + Others + Unknown + `Police Self-transfer`))
View(pivot_prop)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE))
pivot_count <- final %>%
group_by(GEO, Response.Type) %>%
summarize(count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = count)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE))
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
round(4)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`))
pivot_count <- final %>%
group_by(GEO, Response.Type) %>%
summarize(count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = count)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown_prop = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`))
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown_prop = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`)) %>%
mutate_if(is.numeric, round)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown_prop = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`)) %>%
mutate_if(is.numeric, round(4))
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown_prop = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`)) %>%
mutate_if(is.numeric, round(digits=4))
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown_prop = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`)) %>%
mutate_if(is.numeric, round, digits=3)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown_prop = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`)) %>%
mutate_if(is.numeric, round, digits=4)
final <- final %>%
filter(Detail != "Suicide")
## ---------------------------
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
final <- final %>%
filter(Detail != "Suicide")
## ---------------------------
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
View(final)
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail == "Suicide")
final <- final %>%
filter(Detail != "Suicide")
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide")
View(final)
## ---------------------------
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
## ---------------------------
##
## Script name: 04_analysis.R
##
## Purpose of script: To make some pivot tables for the transport mode info.
##
## Author: Cal Chengqi Fang
##
## Date Created: 2023-09-30
##
## Copyright (c) Cal Chengqi Fang, 2023
## Email: cal.cf@uchicago.edu
##
## ---------------------------
##
## Notes:
##
##
## ---------------------------
## set working directory for Mac and PC
setwd("/Users/atchoo/Documents/GitHub/homeboydropoff")  # Cal's working directory (mac)
# setwd("C:/Users/")     # Cal's working directory (PC)
## ---------------------------
rm(list=ls())
options(scipen=6, digits=4)         # I prefer to view outputs in non-scientific notation
memory.limit(30000000)                  # this is needed on some PCs to increase memory allowance, but has no impact on macs.
## ---------------------------
## load up the packages we will need:  (uncomment as required)
require(tidyverse)
require(data.table)
require(googlesheets4)
## ---------------------------
# Read google sheets data into R
final <- read_sheet('1w_BaFUAuatmUQBt3qtRBzhm9tTDV4B9lRjTGTq79bAg')
# Replace NYC boroughs with NYC
final$City.Or.County[final$City.Or.County=="Bronx"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Brooklyn"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Corona (Queens)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="New York (Manhattan)"] <- "NYC"
final$City.Or.County[final$City.Or.County=="Staten Island"] <- "NYC"
# Combine city name and state name
final$GEO <- str_c(final$City.Or.County, ", ", append(state.abb, "DC")[match(final$State, append(state.name, "District of Columbia"))])
# Drop suicide case
final <- final %>%
filter(Detail != "Suicide" | is.na(Detail))
# Make pivot tables
pivot_count <- final %>%
group_by(GEO, Response.Type) %>%
summarize(count = n()) %>%
pivot_wider(names_from = Response.Type, values_from = count)
pivot_prop <- pivot_count %>%
mutate(Ambulance_prop = Ambulance / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Others_prop = Others / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
Unknown_prop = Unknown / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE),
`Police Self-transfer_prop` = `Police Self-transfer` / sum(Ambulance, Others, Unknown, `Police Self-transfer`, na.rm = TRUE)) %>%
select(-c(Ambulance, Others, Unknown, `Police Self-transfer`)) %>%
mutate_if(is.numeric, round, digits=4)
# Save the result
fwrite(pivot_count, "data/pivot1.csv")
fwrite(pivot_prop, "data/pivot2.csv")
